import requests
from datetime import datetime, timezone
from gpiozero import Button
import subprocess
import time
import csv
import ping3

# Get ID Stations
id = "ARGSMD"

# Counter
bucket = Button(17)  # GPIO pin connected to the tipping bucket rain gauge
tip_count = 0

def count_tips():
    global tip_count
    tip_count += 1

bucket.when_pressed = count_tips
print(tip_count)

# CSV log file
filename1 = 'data1menit.csv'
filename10 = 'data10menit.csv'
filenametemp = 'temp.csv'

# Reset counter
def reset_tip_count():
    global tip_count
    tip_count = 0
    print("Resetting tip count")

# URL
url = "http://202.90.198.212/logger/write.php?dat="
host = "202.90.198.212"
#host2 = "http://202.90.198.212/logger/write.php?"

#Suhu CPU
def get_cpu_temperature():
    command = "vcgencmd measure_temp"
    result = subprocess.check_output(command, shell=True)
    temperature = result.decode("utf-8")
    temperature = temperature.replace("temp=", "").replace("'C\n", "")
    return float(temperature)

# Cek Jaringan
def ping_server():
    try:
        response_time = ping3.ping(host)
        if response_time is not None and response_time is not False:
            #print(f"Server {host} responded in {response_time} ms.")
            return True
        else:
            #print(f"Server {host} is unreachable.")
            return False

    except Exception as e:
        print("Error:", e)

ping_server

if ping_server() == True:
    print("Ping Sukses")
else:
    print("Ping Gagal")

#Pengiriman ke HTTP SERVER
def koneksi(url):
    try:
        r = requests.get(url,timeout=3)
        r.raise_for_status()
        #print(r.text)
        return True
    #except requests.exceptions.RequestException:
    #    return False
    #except requests.exceptions.HTTPError:
    #    return False
    except requests.exceptions.ConnectionError:
        return False
    #except requests.exceptions.Timeout:
    #    return False

#Fungsi Utama
try:
    while True: 
        # Get the current UTC datetime
        dt_utc = datetime.now(timezone.utc)
        
        # Convert to a string
        date_string = dt_utc.strftime("%d%m%Y%H%M%S")
        
        # Convert tip_count to rainfall measurement using the specifications of your rain gauge
        rainfall = tip_count * 0.2
        rainfall = format(rainfall, ".1f")

        # Get RR
        RR = rainfall

        # SUHU
        cpu_temp = str(get_cpu_temperature())
        
        # Pengumpulan data ke string
        data = id+";"+date_string+";"+RR+";"+cpu_temp+";0.0"

        # Pengumpulan string data ke URL
        base_url = url+data

        # Fungsi CSV 1 menit
        def write_to_csv1(data):
            with open(filename1, 'a', newline='') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerow([data])
        
        # Fungsi CSV 10 menit
        def write_to_csv10(data):
            with open(filename10, 'a', newline='') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerow([data])

        # Fungsi CSV data gagal kirim
        def write_to_csvtemp(data):
            with open(filenametemp, 'a', newline='') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerow([data])

        # Data 1 menit
        if dt_utc.second == 0:
            print("Data 1 menit:", data)
            #print(date_string)
            write_to_csv1(data)
            time.sleep(1)

        # Data 10 menit
        if dt_utc.minute % 10 == 0 and dt_utc.second == 0:
            print("Data 10 menit:", data)
            #print(date_string)
            write_to_csv10(data)
            url = base_url
            print (url)
            #response = requests.get(url)
            koneksi(url)

            if koneksi == True :
                print("Data terkirim")
            else :
                print("Data tidak terkirim")
                write_to_csvtemp(data)
            print(koneksi)
            time.sleep(1)

        # Reset tip count at midnight (UTC)
        if dt_utc.hour == 0 and dt_utc.minute == 0 and dt_utc.second == 5:
            reset_tip_count()
            time.sleep(1)

except KeyboardInterrupt:
    print("Exiting...")